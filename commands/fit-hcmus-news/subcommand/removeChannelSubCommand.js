import { loadConfig } from "./utils/loadConfig.js";
import { removeConfig } from "./utils/removeConfig.js";
import { PermissionsBitField } from 'discord.js';
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } from 'discord.js';

export async function removeChannelSubCommand(interaction) {
    await interaction.deferReply({ ephemeral: true });

    try {
        // Ki·ªÉm tra quy·ªÅn user
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
            await interaction.editReply({
                embeds: [{ title: "‚ùå Kh√¥ng c√≥ quy·ªÅn", description: "B·∫°n c·∫ßn quy·ªÅn **Manage Channels** ƒë·ªÉ x√≥a setup k√™nh tin t·ª©c.", color: 0xff0000 }]
            });
            return;
        }

        const guildId = interaction.guildId;
        const serverConfig = await loadConfig(guildId);

        if (!serverConfig) {
            await interaction.editReply({
                embeds: [{
                    title: "‚ö†Ô∏è Ch∆∞a c√≥ setup",
                    description: "Ch∆∞a setup m√† remove g√¨ ;-;",
                    color: 0xffaa00,
                }],
                ephemeral: true
            });
            return;
        }

        const channel = interaction.guild.channels.cache.get(serverConfig.channelId);
        const channelDisplay = channel ? `${channel} (#${channel.name})` : `#${serverConfig.channelName}`;

        const confirmEmbed = new EmbedBuilder()
            .setTitle("üóëÔ∏è X√°c nh·∫≠n x√≥a thi·∫øt l·∫≠p k√™nh")
            .setDescription(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a k√™nh ${channelDisplay} kh·ªèi danh s√°ch nh·∫≠n tin t·ª©c t·ª´ **FIT-HCMUS** kh√¥ng?`)
            .addFields(
                { name: "üìç K√™nh hi·ªán t·∫°i", value: channelDisplay, inline: true },
                { name: "üè† Server", value: interaction.guild.name, inline: true }
            )
            .setColor(0xff9900)
            .setFooter({ text: "H·∫øt h·∫°n sau 30 gi√¢y" });

        // yes/no
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('remove_yes')
                    .setLabel('Yes')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('remove_no')
                    .setLabel('No')
                    .setStyle(ButtonStyle.Danger)
            );

        // G·ª≠i embed x√°c nh·∫≠n
        const confirmMessage = await interaction.editReply({
            embeds: [confirmEmbed],
            components: [row],
            ephemeral: true
        });

        // T·∫°o collector ƒë·ªÉ ch·ªù ph·∫£n h·ªìi
        const collector = confirmMessage.createMessageComponentCollector({
            filter: i => i.user.id === interaction.user.id && ['remove_yes', 'remove_no'].includes(i.customId),
            time: 30000 // 30 gi√¢y
        });

        collector.on('collect', async i => {
            await i.deferUpdate();

            if (i.customId === 'remove_no') {
                await interaction.editReply({
                    embeds: [{
                        title: "‚ùå ƒê√£ h·ªßy",
                        description: "Thao t√°c x√≥a k√™nh tin t·ª©c ƒë√£ b·ªã h·ªßy.",
                        color: 0xff0000
                    }],
                    components: [],
                    ephemeral: true
                });
                collector.stop('cancelled');
                return;
            }

            // yes
            const ok = await removeConfig(guildId);

            if (!ok) {
                await interaction.editReply({
                    embeds: [{
                        title: "‚ùå L·ªói h·ªá th·ªëng",
                        description: "Kh√¥ng th·ªÉ x√≥a c·∫•u h√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau.",
                        color: 0xff0000
                    }],
                    components: [],
                    ephemeral: true
                });
                collector.stop('error');
                return;
            }

            await interaction.editReply({
                embeds: [{
                    title: "üóëÔ∏è ƒê√£ x√≥a thi·∫øt l·∫≠p!",
                    description: `K√™nh ${channelDisplay} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch nh·∫≠n tin t·ª©c t·ª± ƒë·ªông.`,
                    color: 0xff9900,
                    timestamp: new Date().toISOString()
                }],
                components: [],
                ephemeral: true
            });

            if (channel) {
                try {
                    await channel.send({
                        embeds: [{
                            title: "üëã Th√¥ng b√°o!",
                            description: "K√™nh n√†y ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch nh·∫≠n tin t·ª©c t·ª± ƒë·ªông t·ª´ **FIT-HCMUS**.",
                            color: 0xff9900,
                            fields: [
                                {
                                    name: "üí° Mu·ªën nh·∫≠n tin t·ª©c tr·ªü l·∫°i?",
                                    value: "S·ª≠ d·ª•ng `/fit-hcmus-news setup` ƒë·ªÉ thi·∫øt l·∫≠p l·∫°i.",
                                    inline: false
                                }
                            ],
                            timestamp: new Date().toISOString()
                        }]
                    });
                } catch (error) {
                    console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o t·∫°m bi·ªát:', error);
                }
            }

            collector.stop('success');
        });

        collector.on('end', async (collected, reason) => {
            if (reason === 'time') {
                await interaction.editReply({
                    embeds: [{
                        title: "‚è∞ H·∫øt th·ªùi gian x√°c nh·∫≠n",
                        description: "Thao t√°c x√≥a k√™nh tin t·ª©c ƒë√£ b·ªã h·ªßy do kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.",
                        color: 0xffaa00
                    }],
                    components: [],
                    ephemeral: true
                });
            }
        });


    } catch (error) {
        console.error('‚ùå Error in removeChannelSubCommand:', error);
        await interaction.editReply({
            content: "‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a thi·∫øt l·∫≠p k√™nh tin t·ª©c.",
            ephemeral: true
        });
    }
}