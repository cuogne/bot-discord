import { loadConfig } from "./utils/loadConfig.js";
import { saveConfig } from "./utils/saveConfig.js";
import { PermissionsBitField } from 'discord.js';

export async function removeChannelSubCommand(interaction) {
    await interaction.deferReply();

    try {
        // Ki·ªÉm tra quy·ªÅn user
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
            await interaction.editReply({
                embeds: [{
                    title: "‚ùå Kh√¥ng c√≥ quy·ªÅn",
                    description: "B·∫°n c·∫ßn quy·ªÅn **Manage Channels** ƒë·ªÉ x√≥a setup k√™nh tin t·ª©c.",
                    color: 0xff0000,
                }]
            });
            return;
        }

        const config = loadConfig();
        const guildId = interaction.guildId;
        const serverConfig = config.servers[guildId];

        if (!serverConfig) {
            await interaction.editReply({
                embeds: [{
                    title: "‚ö†Ô∏è Ch∆∞a c√≥ setup",
                    description: "Ch∆∞a setup m√† remove g√¨ ;-;",
                    color: 0xffaa00,
                }]
            });
            return;
        }

        const channel = interaction.guild.channels.cache.get(serverConfig.channelId);
        const channelDisplay = channel ? `${channel} (#${channel.name})` : `#${serverConfig.channelName}`;

        delete config.servers[guildId]; // x√≥a kh·ªèi config
        const saved = saveConfig(config);

        if (!saved) {
            await interaction.editReply({
                embeds: [{
                    title: "‚ùå L·ªói h·ªá th·ªëng",
                    description: "Kh√¥ng th·ªÉ x√≥a c·∫•u h√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau.",
                    color: 0xff0000
                }]
            });
            return;
        }

        await interaction.editReply({
            embeds: [{
                title: "üóëÔ∏è ƒê√£ x√≥a thi·∫øt l·∫≠p!",
                description: `K√™nh ${channelDisplay} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch nh·∫≠n tin t·ª©c t·ª± ƒë·ªông.`,
                color: 0xff9900,
                timestamp: new Date().toISOString()
            }]
        });

        if (channel) {
            try {
                await channel.send({
                    embeds: [{
                        title: "üëã T·∫°m bi·ªát!",
                        description: "K√™nh n√†y ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch nh·∫≠n tin t·ª©c t·ª± ƒë·ªông t·ª´ **FIT-HCMUS**.",
                        color: 0xff9900,
                        fields: [
                            {
                                name: "üí° Mu·ªën nh·∫≠n tin t·ª©c tr·ªü l·∫°i?",
                                value: "S·ª≠ d·ª•ng `/fit-hcmus-news setup` ƒë·ªÉ thi·∫øt l·∫≠p l·∫°i.",
                                inline: false
                            }
                        ],
                        timestamp: new Date().toISOString()
                    }]
                });
            } catch (error) {
                console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o t·∫°m bi·ªát:', error);
            }
        }

    } catch (error) {
        console.error('‚ùå Error in removeChannelSubCommand:', error);
        await interaction.editReply({
            content: "‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a thi·∫øt l·∫≠p k√™nh tin t·ª©c.",
            ephemeral: true
        });
    }
}